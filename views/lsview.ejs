<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>License</title>
    <script src="https://unpkg.com/xrpl@2.1.0-beta.1"></script>
    <script src="./"></script>
    <script>
        if (typeof module !== "undefined") var xrpl = require("xrpl");
        //
        async function mintNFT(cSecret, acc, cTokenId) {
            var secret = cSecret.value;
            var tokenUrl = "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf4dfuylqabf3oclgtqy55fbzdi";
            var flags = 8;
            //
            const wallet = xrpl.Wallet.fromSeed(secret);
            const client = new xrpl.Client(
                "wss://xls20-sandbox.rippletest.net:51233"
            );
            await client.connect();
            console.log("Connected to Sandbox [mintNFT]");
            //
            const transactionBlob = {
                TransactionType: "NFTokenMint",
                Account: wallet.classicAddress,
                URI: xrpl.convertStringToHex(tokenUrl),
                Flags: parseInt(flags),
                TokenTaxon: 0, //Required, but if you have no use for it, set to zero.
            };
            // Submit signed blob --------------------------------------------------------
            const tx = await client.submitAndWait(transactionBlob, { wallet });
            //
            const nfts = await client.request({
                method: "account_nfts",
                account: wallet.classicAddress,
            });
            //
            console.log(nfts);
            //                    
            console.log("Transaction result:", tx.result.meta.TransactionResult);
            console.log(
                "Balance changes:",
                JSON.stringify(xrpl.getBalanceChanges(tx.result.meta), null, 2)
            );
            //
            client.disconnect();
            //
            var msg = "";
            //
            msg += tx.result.meta.TransactionResult;
            //
            if (tx.result.meta.TransactionResult === 'tesSUCCESS') {
                cTokenId.value = nfts.result.account_nfts[nfts.result.account_nfts.length - 1].TokenID;
                //
                msg += "\r\n\r\ntoken id = ";
                msg += cTokenId.value;
            }
            //
            alert(msg);
            //
            return true;
        }

        async function createSellOffer(cSecret, cTokenId, cOfferID) {
            var secret = cSecret.value;
            var tokenId = cTokenId.value;
            //
            if (secret === "" || tokenId === "") {
                alert("Enter the (secret, tokenkID) value"); return false;
            }
            //
            const wallet = xrpl.Wallet.fromSeed(secret);
            const client = new xrpl.Client(
                "wss://xls20-sandbox.rippletest.net:51233"
            );
            //
            await client.connect();
            //
            console.log("Connected to Sandbox [createSellOffer]");
            // Prepare transaction -------------------------------------------------------
            const transactionBlob = {
                TransactionType: "NFTokenCreateOffer",
                Account: wallet.classicAddress,
                TokenID: tokenId,
                Amount: "10000000",
                Flags: 1,
            };

            // Submit signed blob --------------------------------------------------------

            const tx = await client.submitAndWait(transactionBlob, { wallet });
            //
            console.log("***Sell Offers***");
            //
            let nftSellOffers;
            try {
                nftSellOffers = await client.request({
                    method: "nft_sell_offers",
                    tokenid: tokenId,
                });
            } catch (err) {
                console.log("No sell offers.");
            }
            //
            console.log(JSON.stringify(nftSellOffers, null, 2));
            // Check transaction results -------------------------------------------------
            console.log(
                "Transaction result:",
                JSON.stringify(tx.result.meta.TransactionResult, null, 2)
            );
            console.log(
                "Balance changes:",
                JSON.stringify(xrpl.getBalanceChanges(tx.result.meta), null, 2)
            );
            //
            client.disconnect();
            //
            var msg = "";
            //
            msg += tx.result.meta.TransactionResult;
            //
            if (tx.result.meta.TransactionResult === 'tesSUCCESS') {
                cOfferID.value = nftSellOffers.result.offers[nftSellOffers.result.offers.length - 1].index;
                //
                msg += "\r\n\r\nToken Offer Index = ";
                msg += cOfferID.value;
            }
            //
            alert(msg);
            //
            return true;
        }

        async function acceptSellOffer(cBuySecret, cTokenID, cOfferID) {
            var secret = cBuySecret.value;
            var offerId = cOfferID.value;
            //
            if (secret === "" || offerId === "") {
                alert("Enter the (buySecret, Token Offer Index) value"); return false;
            }
            //
            const wallet = xrpl.Wallet.fromSeed(secret);
            const client = new xrpl.Client(
                "wss://xls20-sandbox.rippletest.net:51233"
            );
            await client.connect();
            console.log("Connected to Sandbox [acceptSellOffer]");

            // Prepare transaction -------------------------------------------------------
            const transactionBlob = {
                TransactionType: "NFTokenAcceptOffer",
                Account: wallet.classicAddress,
                SellOffer: offerId,
            };
            // Submit signed blob --------------------------------------------------------
            const tx = await client.submitAndWait(transactionBlob, { wallet });
            const nfts = await client.request({
                method: "account_nfts",
                account: wallet.classicAddress,
            });
            //
            console.log(JSON.stringify(nfts, null, 2));
            //
            // Check transaction results -------------------------------------------------
            console.log(
                "Transaction result:",
                JSON.stringify(tx.result.meta.TransactionResult, null, 2)
            );
            console.log(
                "Balance changes:",
                JSON.stringify(xrpl.getBalanceChanges(tx.result.meta), null, 2)
            );
            //
            client.disconnect();
            //
            var msg = "";
            //
            msg += tx.result.meta.TransactionResult;
            //
            if (tx.result.meta.TransactionResult === 'tesSUCCESS') {
                cBuySecret.value = cOfferID.value = cTokenID.value = "";
                //
                msg += "\r\n\r\nsold to buyer (" + wallet.classicAddress + ")";
            }
            //
            alert(msg);
            //
            return true;
        }

        async function getOffers(cSecret, cTokenID, cOfferID) {
            var secret = cSecret.value;
            var tokenId = cTokenID.value;
            //
            if (secret === "" || tokenId === "") {
                alert("Enter the (secret, tokenkID) value"); return false;
            }
            //
            const wallet = xrpl.Wallet.fromSeed(secret);

            const client = new xrpl.Client(
                "wss://xls20-sandbox.rippletest.net:51233"
            );
            await client.connect();

            const nfts = await client.request({
                method: "account_nfts",
                account: wallet.classicAddress,
            });
            //
            console.log("Connected to Sandbox [getOffers]");
            console.log(wallet);
            console.log("***Sell Offers***");
            let off;
            var o;
            //
            try {
                o = await client.request({
                    method: "nft_sell_offers",
                    tokenid: tokenId,
                });
                //
                cOfferID.value = o.result.offers[o.result.offers.length - 1].index;
                //
            } catch (err) {
                cOfferID.value = "";
                //
                console.log("No sell offers.");
            }
            //
            client.disconnect();
        }
    </script>
</head>

<body>
    <h1>License System</h1>
    <% for(var i=0; i < data.length ; i++){ %>
        <div className="child">
            <h3>
                <text>Level-<%=i+1 %> :</text>
                <text>
                    <%=data[i] %>
                </text>
            </h3>
            <input type="text" id="secret<%=i+1%>" size="80" placeholder="secret" />
            <button type="button" onClick="mintNFT(secret<%=i+1%>,'<%=data[i]%>', tokenID<%=i+1%>)">mint-NFT</button>
            <br>
            <input type="text" id="tokenID<%=i+1%>" size="80" placeholder="Token ID" />
            <button type="button"
                onClick="createSellOffer(secret<%=i+1%>, tokenID<%=i+1%>, offerID<%=i+1%>)">Sell-NFT</button>
            <br>
            <input type="text" id="offerID<%=i+1%>" size="80" placeholder="Token Offer Index" />
            <button type="button"
                onClick="getOffers(secret<%=i+1%>, tokenID<%=i+1%>, offerID<%=i+1%>)">GetOffers</button>
            <br>
            <input type="text" id="buySecret<%=i+1%>" size="80" placeholder="Buyer's wallet secret" />
            <button type="button"
                onClick="acceptSellOffer(buySecret<%=i+1%>, tokenID<%=i+1%>, offerID<%=i+1%>)">Buy-NFT</button>
        </div>
        <br><br>
        <% } %>
            <div>
                <a href="/licenseSystem">Back</a>
            </div>
</body>

</html>